import os
from base64 import b64encode, b64decode
from flask import Blueprint, jsonify, request
from sqlalchemy.orm import Session
from models import SessionLocal, UserInfo, SiteRecipe, StageRecipe, UserProfile
from werkzeug.security import generate_password_hash
from flask_cors import cross_origin
import hashlib
from argon2 import PasswordHasher, exceptions


api = Blueprint("api", __name__)

@api.route("/users", methods=["GET"])
def get_users():
    session = SessionLocal()
    users = session.query(UserInfo).all()
    session.close()
    return jsonify([
        {"email": user.userEmail, "login": user.userLogin} for user in users
    ])

@api.route("/users/<string:user_login>", methods=["GET"])
def get_user_profile(user_login):
    session = SessionLocal()
    user = session.query(UserProfile).filter_by(userLoginID=user_login).first()
    session.close()
    if user:
        return jsonify({
            "login": user.userLoginID,
            "fullName": user.userFullName,
            "description": user.userDescription,
            "image": user.userImage,
            "recipesCount": user.userRecipes
        })
    return jsonify({"error": "User not found"}), 404

@api.route("/recipes", methods=["GET"])
def get_recipes():
    session = SessionLocal()
    recipes = session.query(SiteRecipe).all()
    session.close()
    return jsonify([
        {"id": r.idRecipe, "title": r.titleRecipe, "author": r.autorRecipe} for r in recipes
    ])

@api.route("/recipes/<int:recipe_id>", methods=["GET"])
def get_recipe(recipe_id):
    session = SessionLocal()
    recipe = session.query(SiteRecipe).filter_by(idRecipe=recipe_id).first()
    session.close()
    if recipe:
        return jsonify({
            "id": recipe.idRecipe,
            "title": recipe.titleRecipe,
            "description": recipe.discriptionRecipe,
            "country": recipe.contryRecipe,
            "type": recipe.typeRecipe,
            "author": recipe.autorRecipe,
            "image": recipe.imageRecipe
        })
    return jsonify({"error": "Recipe not found"}), 404

@api.route("/recipes/<int:recipe_id>/stages", methods=["GET"])
def get_recipe_stages(recipe_id):
    session = SessionLocal()
    stages = session.query(StageRecipe).filter_by(idRecipe=recipe_id).all()
    session.close()
    return jsonify([
        {"stage": s.stage, "description": s.stageDiscription, "image": s.stageImage} for s in stages
    ])

ph = PasswordHasher()





@api.route("/register", methods=["POST"])
def register():
    data = request.json
    email = data.get("email")
    login = data.get("user_tag")
    password = data.get("password")

    if not email or not login or not password:
        return jsonify({"error": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!"}), 400

    session = SessionLocal()
    existing_user = session.query(UserInfo).filter_by(userLogin=login).first()
    existing_email = session.query(UserInfo).filter_by(userEmail=email).first()

    if existing_user:
        session.close()
        return jsonify({"error": "–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç!"}), 400
    if existing_email:
        session.close()
        return jsonify({"error": "–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"}), 400

    print(f"[REGISTER] –ò—Å—Ö–æ–¥–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}")

    # üî• –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–ª—å
    salt = os.urandom(16)  # 16 –±–∞–π—Ç —Å–ª—É—á–∞–π–Ω–æ–π —Å–æ–ª–∏
    encoded_salt = b64encode(salt).decode()  # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è

    # üî• –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º —Å–æ–ª—å –≤ Argon2
    hashed_password = ph.hash(password, salt=salt)

    print(f"[REGISTER] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–æ–ª—å: {encoded_salt}")
    print(f"[REGISTER] –ò—Ç–æ–≥–æ–≤—ã–π —Ö–µ—à –ø–∞—Ä–æ–ª—è: {hashed_password}")

    new_user = UserInfo(userEmail=email, userLogin=login, userPassword=hashed_password, salt=encoded_salt)

    try:
        session.add(new_user)
        session.commit()
        print(f"[REGISTER] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{login}' —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        return jsonify({"message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"}), 201
    except Exception as e:
        session.rollback()
        print(f"[REGISTER] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!"}), 500
    finally:
        session.close()



@api.route("/login", methods=["POST"])
def login():
    data = request.json
    login = data.get("login")
    password = data.get("password")

    if not login or not password:
        return jsonify({"error": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!"}), 400

    session = SessionLocal()
    user = session.query(UserInfo).filter_by(userLogin=login).first()
    session.close()

    if not user:
        print(f"[LOGIN] ‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{login}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"}), 404

    print(f"[LOGIN] –ò—Å—Ö–æ–¥–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {password}")

    # üî• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–ª—å –∏–∑ –ë–î
    stored_salt = b64decode(user.salt)  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    print(f"[LOGIN] –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å–æ–ª—å: {user.salt}")

    # üî• –•–µ—à–∏—Ä—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å —ç—Ç–æ–π —Å–æ–ª—å—é (–∫–∞–∫ –≤ `register()`)
    hashed_input = ph.hash(password, salt=stored_salt)
    print(f"[LOGIN] –ù–æ–≤—ã–π —Ö–µ—à –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: {hashed_input}")
    print(f"[LOGIN] –•–µ—à –≤ –ë–î: {user.userPassword}")

    # üî• –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–µ—à–∏
    if hashed_input == user.userPassword:
        print(f"[LOGIN] ‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{login}'")
        return jsonify({"message": "–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!"}), 200
    else:
        print(f"[LOGIN] ‚ùå –û—à–∏–±–∫–∞: –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!"}), 401
